A piece has the following format ( O, X, Y, S )
O - orientation
    0 - horizontal = col
    1 - vertical = row
X = column index
Y = row index
S = Size, how many cells in the orientation direction the piece takes up.



###My thoughts, during the implementation
heuristics could be;
    - Høyre side av bilen sin distanse til mål + hvor mange blokkerte ruter til mål.
        - hvor mange trekk som minimum må takes uten hindringer + hvor mange trekk minimum for å klargjøre veien
        Dette burde gi en ganske nøyaktig vurdering, og aldri overestimere. Bruke manhatten, siden bilen aldri vil kunne
        flytte seg i flere enn maks en rettning (vertikalt eller horisontalt).


i denne her funksjonen generateSuccessors har vi expanded size. pass inn til checkIfMoveIsPossible, bytt ut alle plasser der størrelsen med epanded size.






##### Finne alle Permutasjoner
r = orginal rad / kolonne

hvis vi har 3 segmenter

m = {
    flytt segment 3 helt til høyre,
    flytt segment 2 helt til høyre
    flytt segment 1 helt til høyre
}

o = {
    r' = øk indeksen til alle segmenten med 1 i r.
    sett r til å være den nye r'
    gjennta mønster m for r'
}

gjør o,  x antall ganger hvor x = lengden av raden/kolonnen - (minus) antall segmenter






    def getAllColumnPermutations(self, elementArray):
        elementString = ""
        for i in range(len(elementArray)):
            if (elementArray[i] == self.numRows):
                elementString = str(i) * self.numRows
            else:
                elementString += str(i) * elementArray[i]
            if (i == len(elementArray)-1):
                elementString += "-" * (self.numRows - len(elementString))
        # all permutations # contains duplicates... (1,2) and (2,1) == duplicates.
        perms = list(set([''.join(p) for p in permutations(elementString)]))
        legalColumnPerms = []
        for l in range(len(perms)):
            for k in range(len(elementArray)):
                legal = True
                if (str(perms[l]).find(str(k) * int(elementArray[k])) == -1):
                    legal = False
                    break
            if (legal):
                legalColumnPerms.append(perms[l])
        return legalColumnPerms

